// 이전코드 

let bleManager = BLEManager()
        
        bleManager.startScanning()
        var uuids: [String]?
        var repeatCount = 0
        
        
        repeatCount += 1
        
        // Set a condition to stop repeating (e.g., repeat 5 times)
        if repeatCount < 333 {
            // Call the function again after a delay
            bleManager.minewBeaconManager(bleManager.beaconManager, didUpdate: .powerOn)
            DispatchQueue.global().asyncAfter(deadline: .now() + 0.2) {
                bleManager.minewBeaconManager(bleManager.beaconManager, appear: bleManager.scannedBeacons)
                bleManager.minewBeaconManager(bleManager.beaconManager, didRangeBeacons: bleManager.scannedBeacons)
                bleManager.minewBeaconManager(bleManager.beaconManager, didUpdate: .powerOn)
                
                DispatchQueue.global(qos: .userInitiated).async {
                    
                    bleManager.beaconConnection(bleManager.connection, didChange: .connected, appear: bleManager.scannedBeacons)
                }
                
                
                uuids = bleManager.beaconUUID
                
                print("beacon count - ", bleManager.scannedBeacons.count)
                print("???")
                print(uuids)
                
            }
        }


// 변경코드

let bleManager = BLEManager()

func performBLEOperations(completion: @escaping () -> Void) {
    bleManager.startScanning()

    // Set a condition to stop repeating (e.g., when desired results are obtained)
    if bleManager.scannedBeacons.count < desiredBeaconCount {
        DispatchQueue.global().asyncAfter(deadline: .now() + 0.2) {
            // Your BLE operations go here
            bleManager.minewBeaconManager(bleManager.beaconManager, didUpdate: .powerOn)
            bleManager.minewBeaconManager(bleManager.beaconManager, appear: bleManager.scannedBeacons)
            bleManager.minewBeaconManager(bleManager.beaconManager, didRangeBeacons: bleManager.scannedBeacons)
            bleManager.minewBeaconManager(bleManager.beaconManager, didUpdate: .powerOn)

            DispatchQueue.global(qos: .userInitiated).async {
                bleManager.beaconConnection(bleManager.connection, didChange: .connected, appear: bleManager.scannedBeacons)
            }

            // Check if the desired results are obtained
            if bleManager.scannedBeacons.count >= desiredBeaconCount {
                completion()
            } else {
                // If not, recursively call the function again
                self.performBLEOperations(completion: completion)
            }
        }
    } else {
        completion()
    }
}

// Call the function
performBLEOperations {
    // This block will be executed when the desired results are obtained
    let uuids = bleManager.beaconUUID
    print("Beacon count - ", bleManager.scannedBeacons.count)
    print(uuids)
}




// 최종 에서 안정성 높이는 중
func performBLEOperations(completion: @escaping () -> Void) {
        
        bleManager.startScanning()

        // Set a condition to stop repeating (e.g., when desired results are obtained)
        
        
        if self.bleManager.beaconUUID == nil {
            DispatchQueue.global().asyncAfter(deadline: .now() + 0.2) {
                // Your BLE operations go here
                self.bleManager.minewBeaconManager(self.bleManager.beaconManager ?? MinewBeaconManager(), didUpdate: .powerOn)
                
                self.bleManager.minewBeaconManager(self.bleManager.beaconManager ?? MinewBeaconManager(), appear: self.bleManager.scannedBeacons ?? [])
                
                self.bleManager.minewBeaconManager(self.bleManager.beaconManager ?? MinewBeaconManager(), didRangeBeacons: self.bleManager.scannedBeacons ?? [])
                self.bleManager.minewBeaconManager(self.bleManager.beaconManager ?? MinewBeaconManager(), didUpdate: .powerOn)

                DispatchQueue.global(qos: .userInitiated).async {
                    self.bleManager.beaconConnection(self.bleManager.connection, didChange: .connected, appear: self.bleManager.scannedBeacons ?? [])
                }

                // 카운트로 하지말고 uuid 값으로 변경하기 
                // Check if the desired results are obtained
                if self.bleManager.beaconUUID?.count ?? 0 >= 1 {
                    completion()
                } else {
                    // If not, recursively call the function again
                    self.performBLEOperations(completion: completion)
                }
            }
        } else {
            completion()
        }
    }


// 최종 코드 검증중 여기서 메인으로 바꿔야할 코드가 있음. 
// 메인쓰레드의 파워를 느낌;;
func performBLEOperations(completion: @escaping () -> Void) {
        
        bleManager.startScanning()

        // Set a condition to stop repeating (e.g., when desired results are obtained)
        
        
        if bleManager.scannedBeacons?.count ?? 0 < 1 {
            DispatchQueue.global().asyncAfter(deadline: .now() + 0.2) {
                // Your BLE operations go here
                self.bleManager.minewBeaconManager(self.bleManager.beaconManager ?? MinewBeaconManager(), didUpdate: .powerOn)
                self.bleManager.minewBeaconManager(self.bleManager.beaconManager ?? MinewBeaconManager(), appear: self.bleManager.scannedBeacons ?? [])
                self.bleManager.minewBeaconManager(self.bleManager.beaconManager ?? MinewBeaconManager(), didRangeBeacons: self.bleManager.scannedBeacons ?? [])
                self.bleManager.minewBeaconManager( self.bleManager.beaconManager ?? MinewBeaconManager(), didUpdate: .powerOn)
                
                DispatchQueue.global(qos: .userInitiated).async {
                    self.bleManager.beaconConnection( self.bleManager.connection, didChange: .connected, appear: self.bleManager.scannedBeacons ?? [])
                }
                
                // Check if the desired results are obtained
                if self.bleManager.scannedBeacons?.count ?? 0 >= 1 {
                    completion()
                } else {
                    // If not, recursively call the function again
                    self.performBLEOperations(completion: completion)
                }
            }
        } else {
            completion()
        }
    }
