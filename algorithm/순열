func solution_permutation(_ A:[Int], _ B:[Int]) -> Int
{
    var ans = 0
    
    //1. 순열로?
    //2. 두 배열의 길이만큼(두 배열 카운트 곱이 총 경우의 수) 각각 다곱해서 베열에 값을 넣는다.
    //순열로 뽑아서 첫케이스 다 더하고 , 두번째도 다 더하고, 세번째도 다더하고 길이만큼 다 더하기
    // 그 중 최솟값 배열.min
    func permute(_ nums: [Int], _ targetNum: Int) -> [[Int]] {
        var result = [[Int]]()
        var visited = [Bool](repeating: false, count: nums.count)
        
        func permutation(_ nowPermute: [Int]) {
            if nowPermute.count == targetNum {
                result.append(nowPermute)
                return
            }
            for i in 0..<nums.count {
                if visited[i] == true {
                    continue
                }
                else {
                    visited[i] = true
                    permutation(nowPermute + [nums[i]])
                    visited[i] = false
                }
            }
        }
        permutation([])
        print(result)
        return result
    }
    var a = permute(A, A.count)
    var b = permute(B, B.count)
    var d = b.reversed()
    
    
    var c = zip(a, b).map { zip($0, $1).map(*) }
    c = zip(a, d).map { zip($0, $1).map(*) }
    print(c)
    // 각각의 원소들의 합
    var answer: [Int] = []
    for i in 0...c.count-1 { answer.append(c[i].reduce(0, +))  }
    
    ans = answer.min()!
    print(ans)
    return ans
}
