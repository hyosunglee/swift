깊이 우선 탐색 depth first search

  - 탐색하려는 노드의 자식 노드부터 우선 탐색하는 방식


  let graph: [String: [String]] = [
    "A" : ["B", "C"],
    "B" : ["A", "D", "E"],
    "C" : ["A", "F"],
    "D" : ["B"],
    "E" : ["B"],
    "F" : ["C"]
]
 

func DFS(graph: [String: [String]], start: String) -> [String] {
    var visitedQueue: [String] = []
    var needVisitStack: [String] = [start]
    
    while !needVisitStack.isEmpty {
        let node: String = needVisitStack.removeLast()
        if visitedQueue.contains(node) { continue }
        
        visitedQueue.append(node)
       needVisitStack += graph[node] ?? []
    }
    
    return visitedQueue
}

일반적으로 노드 수(V), 간선 수(E)라 했을 때 시간 복잡도는
  
                O(V+E)

사이클 찾기: DFS는 그래프에서 사이클을 찾는 데 사용됩니다. 한 노드에서 출발하여 다음 노드로 이동할 때마다 방문 여부를 검사하고, 이미 방문한 노드를 만나면 사이클이 존재한다는 것을 알 수 있습니다.
미로 찾기: DFS는 미로 찾기 문제를 해결하는 데 사용됩니다. 미로를 그래프로 모델링하고, 시작점에서 출발하여 목적지에 도달할 때까지 DFS를 반복하여 경로를 찾습니다.
위상 정렬: DFS는 방향 그래프에서 위상 정렬을 수행하는 데 사용됩니다. DFS를 수행하면서 더 이상 방문할 수 없는 노드부터 역순으로 정렬하여 위상 정렬을 수행할 수 있습니다.
연결 요소 찾기: DFS는 그래프에서 연결 요소를 찾는 데 사용됩니다. DFS를 수행하면서 방문한 노드들을 하나의 연결 요소로 묶을 수 있습니다.

출처 : https://magomercy.com/algorithm/swift+dfs+bfs+%EC%86%8C%EA%B0%9C
